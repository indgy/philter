{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"A PHP fluent input sanitiser. Installation Install using composer: composer require indgy/philter Getting started Philter is extremely simple to use, just call the class padding in your untrusted input, combine the filters and finally call toFloat() , toInt() or toString() : $f = new Philter($unsafe_input); $str = $f->in(['safe','string','options']) ->default('safe') ->toString(); There is a cleaner function shortcut which returns a new Philter instance: use function \\Indgy\\filter; $str = philter($unsafe_input) ->in(['safe','string','options']) ->default('safe') ->toString(); Custom filters You may define one-off custom filters using the `apply()` method with a closure which accepts the variable being filtered: filter($string)->apply(function($v) { // do your thing here $v = $v.= 'I was philtered'; // always return $v or null return $v; })->toString(); Available filters String Numeric Range Regex","title":"Introduction"},{"location":"#a-php-fluent-input-sanitiser","text":"","title":"A PHP  fluent input sanitiser."},{"location":"#installation","text":"Install using composer: composer require indgy/philter","title":"Installation"},{"location":"#getting-started","text":"Philter is extremely simple to use, just call the class padding in your untrusted input, combine the filters and finally call toFloat() , toInt() or toString() : $f = new Philter($unsafe_input); $str = $f->in(['safe','string','options']) ->default('safe') ->toString(); There is a cleaner function shortcut which returns a new Philter instance: use function \\Indgy\\filter; $str = philter($unsafe_input) ->in(['safe','string','options']) ->default('safe') ->toString();","title":"Getting started"},{"location":"#custom-filters","text":"You may define one-off custom filters using the `apply()` method with a closure which accepts the variable being filtered: filter($string)->apply(function($v) { // do your thing here $v = $v.= 'I was philtered'; // always return $v or null return $v; })->toString();","title":"Custom filters"},{"location":"#available-filters","text":"","title":"Available filters"},{"location":"#string","text":"","title":"String"},{"location":"#numeric","text":"","title":"Numeric"},{"location":"#range","text":"","title":"Range"},{"location":"#regex","text":"","title":"Regex"},{"location":"reference/","text":"Reference","title":"Reference"},{"location":"reference/#reference","text":"","title":"Reference"}]}